<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nightingale – Documentation</title>
    <link>/docs/</link>
    <description>Recent content in Documentation on Nightingale</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: DataModel</title>
      <link>/docs/appendix/datamodel/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/appendix/datamodel/</guid>
      <description>
        
        
        &lt;p&gt;首先举个例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ident&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;10.4.5.6&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;alias&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;c3-cloud-ceph01.bj&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;metric&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;system_fs_inodes_used&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;device&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/dev/vda1&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1624062385&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;351&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;“资源”一词的解释：资源即某个监控实体，比如某个机器、交换机、防火墙、调制解调器等等。夜莺提供了资源分组的能力，用于应对传统的物理机、虚拟机的服务混部监控场景，ident和alias字段就是用于标识资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ident：资源唯一标识，如果是机器的监控指标，这个字段大都填充为机器ip，如果是跟设备无关的指标，这个字段可以为空&lt;/li&gt;
&lt;li&gt;alias：资源名称，如果是机器，这个字段很可能是填充为hostname，当然，如果是设备无关的指标，这个字段也是空，即使是设备的指标，这个字段也允许为空&lt;/li&gt;
&lt;li&gt;metric：监控指标的名字&lt;/li&gt;
&lt;li&gt;tags：监控数据的维度信息，上例中从监控指标的名字可以得知代表inode的使用量，但是一个机器有多个盘，具体是哪个盘还需要表达出来，这种就用tags来描述&lt;/li&gt;
&lt;li&gt;time：UNIX时间戳，单位是秒&lt;/li&gt;
&lt;li&gt;value：监控数据此刻的值，只能是数值，服务端最终都转换为浮点数处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;夜莺的服务端提供了监控数据上报的接口，如果是要把监控数据上报给服务端，就用上例中的数据结构组装为list上报即可，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -X POST -H &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; http://n9e-server-address/v1/n9e/push -d &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;[
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;ident&amp;#34;: &amp;#34;10.4.5.6&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;alias&amp;#34;: &amp;#34;c3-cloud-ceph01.bj&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;metric&amp;#34;: &amp;#34;system_fs_inodes_used&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;tags&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;            &amp;#34;device&amp;#34;: &amp;#34;/dev/vda1&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        },
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;time&amp;#34;: 1624062385,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;value: 351
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    },
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;ident&amp;#34;: &amp;#34;10.4.5.6&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;alias&amp;#34;: &amp;#34;c3-cloud-ceph01.bj&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;metric&amp;#34;: &amp;#34;system_fs_inodes_used&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;tags&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;            &amp;#34;device&amp;#34;: &amp;#34;/dev/vda2&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        },
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;time&amp;#34;: 1624062385,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;value: 35109
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;]&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外，夜莺的客户端即n9e-agentd进程支持statsd的方式接收数据，在agentd的配置文件中将statsd功能enable即可，statsd的介绍在：&lt;a href=&#34;https://github.com/statsd/statsd&#34;&gt;github&lt;/a&gt; ，statsd是一个指标聚合神器，通常用于应用监控的场景。使用node.js语言开发，n9e-agentd是go写的，即用go实现了node.js的逻辑，statsd社区提供的各种语言的sdk都可以直接使用，业务方用这些sdk埋点，把数据推送地址设置为n9e-agentd的udp地址，即可与夜莺打通，用夜莺来做应用监控。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 告警函数</title>
      <link>/docs/appendix/funcs/</link>
      <pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/appendix/funcs/</guid>
      <description>
        
        
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;函数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;连续发生(all)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近 n 秒内的每个值都触发阈值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;发生次数(happen)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近 n 秒内，有 m 次触发阈值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;求和(sum)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近 n 秒内所有的点之和触发阈值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;平均值(avg)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近 n 秒内所有的点的平均值触发阈值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;最小值(min)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近 n 秒内所有的点的最小值触发阈值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;最大值(max)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近 n 秒内所有的点的最大值触发阈值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;突增突降率(pdiff) &lt;strong&gt;区分正负&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近 n 秒的变化率, 有一个触发阈值则告警，举例：最近3个周期的值分别为 v1, v2, v3（v1为最新值）那么计算公式为 any( (v1-v2)/v2, (v1-v3)/v3 )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;突增突降值(diff) &lt;strong&gt;区分正负&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近 n 秒的变化量, 有一个触发阈值则告警，举例：最近3个周期的值分别为 v1, v2, v3（v1为最新值）那么计算公式为 any( (v1-v2), (v1-v3) )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;同比变化值(c_avg) &lt;strong&gt;区分正负&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近 n 秒的几个值取平均，相比1天或7天前同时段值的变化值，举例：最近n个值是 v1，v2，v3，过去同时段的值是 v1&amp;rsquo;，v2&amp;rsquo;，v3&amp;rsquo;，那么计算公式为 avg(v1,v2,v3)-avg(v1&amp;rsquo;,v2&amp;rsquo;,v3&amp;rsquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;同比变化值的绝对值(c_avg_abs)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近 n 秒的几个值取平均，相比1天或7天前同时段值的变化值，举例：最近n个值是 v1，v2，v3，过去同时段的值是 v1&amp;rsquo;，v2&amp;rsquo;，v3&amp;rsquo;，那么计算公式为 abs(avg(v1,v2,v3)-avg(v1&amp;rsquo;,v2&amp;rsquo;,v3&amp;rsquo;))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;同比变化率(c_avg_rate) &lt;strong&gt;区分正负&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近 n 秒的几个值取平均，相比1天或7天前同时段值的变化率，举例：最近n个值是 v1，v2，v3，过去同时段的值是 v1&amp;rsquo;，v2&amp;rsquo;，v3&amp;rsquo;，那么计算公式为 (avg(v1,v2,v3)-avg(v1&amp;rsquo;,v2&amp;rsquo;,v3&amp;rsquo;))/avg(v1&amp;rsquo;,v2&amp;rsquo;,v3&amp;rsquo;)*100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;同比变化率的绝对值(c_avg_rate_abs)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近 n 秒的几个值取平均，相比1天或7天前同时段值的变化率的绝对值，举例：最近n个值是 v1，v2，v3，过去同时段的值是 v1&amp;rsquo;，v2&amp;rsquo;，v3&amp;rsquo;，那么计算公式为 abs((avg(v1,v2,v3)-avg(v1&amp;rsquo;,v2&amp;rsquo;,v3&amp;rsquo;))/avg(v1&amp;rsquo;,v2&amp;rsquo;,v3&amp;rsquo;))*100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3-sigma离群点检测&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;持续 n 秒内波动值过大，超过了 m 个标准差范围，默认 m 为 3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: API调用</title>
      <link>/docs/appendix/api/</link>
      <pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/appendix/api/</guid>
      <description>
        
        
        &lt;h2 id=&#34;数据上报&#34;&gt;数据上报&lt;/h2&gt;
&lt;p&gt;直接看使用curl命令上报数据的例子即可，如果是其他语言翻译一下就完了。监控指标组织为json list格式，放到http request body中，post给n9e-server即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -X POST -H &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; http://n9e-server-address/v1/n9e/push -d &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;[
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;ident&amp;#34;: &amp;#34;10.4.5.6&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;alias&amp;#34;: &amp;#34;c3-cloud-ceph01.bj&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;metric&amp;#34;: &amp;#34;system_fs_inodes_used&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;tags&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;            &amp;#34;device&amp;#34;: &amp;#34;/dev/vda1&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        },
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;time&amp;#34;: 1624062385,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;value: 351
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    },
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;ident&amp;#34;: &amp;#34;10.4.5.6&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;alias&amp;#34;: &amp;#34;c3-cloud-ceph01.bj&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;metric&amp;#34;: &amp;#34;system_fs_inodes_used&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;tags&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;            &amp;#34;device&amp;#34;: &amp;#34;/dev/vda2&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        },
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;time&amp;#34;: 1624062385,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;value: 35109
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;]&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中各个字段的含义参考《&lt;a href=&#34;/docs/appendix/datamodel/&#34;&gt;DataModel&lt;/a&gt;》一章，其中ident、alias字段也是可选的，很多情形的监控数据是没法和设备关联在一起的，比如某个域名的证书过期时间，这种监控数据就可以不传ident、alias字段。&lt;/p&gt;
&lt;h2 id=&#34;数据读取&#34;&gt;数据读取&lt;/h2&gt;
&lt;p&gt;夜莺的后端存储可以支持使用M3、Prometheus、InfluxDB等等，这些存储本身就暴露了数据查询的接口，所以，大家可以直接使用存储自身提供的查询接口。也可以使用夜莺的，下面讲解一下夜莺的查询监控数据的方式。&lt;/p&gt;
&lt;p&gt;夜莺的监控数据查询，主要是两种模式，模式一是直接传入一个promql，夜莺把这个promql透传给后端存储；模式二是指定metric、idents、tags等过滤条件，夜莺根据不同的存储后端接口，做查询条件的ETL转换。所以，如果想走夜莺的接口，建议用模式二的方式，因为模式一的方式根本不用查夜莺的接口，绕了一层多此一举，直接查后端存储即可。下面给一个模式二的查询例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# python环境默认可能没有requests这个库，需要先安装一下&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 或者直接把下面的例子转换成curl命令来测试&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;requests&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;query_data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 开始时间&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 结束时间&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;params&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;metric&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;system_cpu_idle&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;idents&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1.1.1.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2.2.2.2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;],&lt;/span&gt;
                &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;job&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;job&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;db&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;inf&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;],&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;],&lt;/span&gt;
        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#  返回series数量限制&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;limit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;uri&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;http://localhost:8000/v1/n9e/query&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;post&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;uri&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;__name__&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;query_data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的例子中，核心有三个过滤条件，metric、idents、tags，相互之间是“与”的关系，tags中也有多个条件，不同key之间是“与”的关系，相同key的不同value是“或”的关系，即：&lt;code&gt;job=node|db &amp;amp;&amp;amp; group=inf&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;二次开发&#34;&gt;二次开发&lt;/h2&gt;
&lt;p&gt;夜莺的http接口主要有两个前缀，&lt;code&gt;/api/n9e&lt;/code&gt;相关的是给前端JavaScript使用，用cookie做认证，写操作会有CSRF校验。&lt;code&gt;/v1/n9e&lt;/code&gt;前缀的接口是给第三方系统用的。&lt;code&gt;/v1/n9e&lt;/code&gt;相关的接口如何认证呢？使用token(个别接口不用token，比如数据上报查询的接口)；token从哪里找呢？去页面上，个人中心密钥里；调用接口的时候如何传递token呢？使用Authorization这个Header。比如某个第三方系统要调用夜莺的接口，先由管理员去用户中心为这个系统创建个账号，然后用这个账号登录，生成token(密钥)即可。&lt;/p&gt;
&lt;p&gt;举例，拉取用户列表的接口，使用curl来调用，样例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -H &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Authorization: 59f668a8ac7df683a275e57a15de0db9&amp;#34;&lt;/span&gt; http://&lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;n9e&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-server&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;/v1/n9e/users
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;接口安全&#34;&gt;接口安全&lt;/h2&gt;
&lt;p&gt;如果夜莺是部署在公网的，&lt;code&gt;/v1/n9e&lt;/code&gt;相关的接口有些又没有认证机制，可能会被恶意利用，建议的做法：n9e-server启动的时候监听在内网ip，在n9e-server前面部署一层nginx，nginx只需对外暴露&lt;code&gt;/api/n9e&lt;/code&gt;相关的接口，upstream是n9e-server的内网ip，所以别人也就访问不到了。nginx的配置可以参考《&lt;a href=&#34;/docs/appendix/nginx/&#34;&gt;配置nginx&lt;/a&gt;》&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 配置nginx</title>
      <link>/docs/appendix/nginx/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/appendix/nginx/</guid>
      <description>
        
        
        &lt;p&gt;下面给出nginx的典型配置，大家也可以加一下gzip压缩之类的提升性能，这个就由各位自由发挥了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen       80;
    server_name  _;

    root   /opt/n9e/pub;

    location / {
        root /opt/n9e/pub;
        try_files $uri /index.html;
    }

    location /api/ {
        proxy_pass http://127.0.0.1:8000;
    }
}
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 功能简介</title>
      <link>/docs/usage/menus/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/usage/menus/</guid>
      <description>
        
        
        &lt;p&gt;监控的菜单分四大块：监控看图、资源管理、策略配置、事件管理，下面分别解释各块的功能。&lt;/p&gt;
&lt;h2 id=&#34;监控看图&#34;&gt;监控看图&lt;/h2&gt;
&lt;p&gt;监控数据采集到之后，最频繁的操作就是看图，查看监控数据的历史趋势，通常会有两个看图场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即时看图：因为要查问题，或者分析趋势，即时查询一些监控指标的数据，即所谓的ad-hoc的查询。即时看图的做法，是直接输入metric(指标名字)右侧就出图了，这种交互体验比较适合查看应用、业务的指标，但是查看机器的指标的逻辑会有差异，看机器的监控数据，通常都是先找到一批机器，然后再去看指标，这种看图场景我们也支持，不过不是放在即时看图里，而是放到了资源管理-看图的页面了&lt;/li&gt;
&lt;li&gt;监控大盘：把经常要看的图表，分门别类组织成一张张大盘，大盘里会有多张图，这些图的排布本身就是一个经验的传递。比如Oracle数据库，新入门的小白对于Oracle应该查看哪些指标，以及各个指标的含义是比较懵的，那此时一个前辈大咖做好的大盘，就是一个非常值得借鉴的输入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有一个指标释义的功能菜单，这个是对metric的中文释义的一个维护。在查看metric的很多场景都会把这个释义展示出来方便理解。agentd内置的指标，我们会梳理出一个中文释义，内置到数据库里。后续如果朋友要自己写插件，就需要自己提供一个metric英文名字和中文释义的对应关系，然后在指标释义这个菜单里导入。&lt;/p&gt;
&lt;h2 id=&#34;资源管理&#34;&gt;资源管理&lt;/h2&gt;
&lt;p&gt;资源管理这个功能，是为了应对物理机、虚拟机的场景，Zabbix中有个HostGroup，就是为了应对机器的场景，当然Zabbix主要就是处理设备的监控，应用、业务层面的监控相对难搞一些，Prometheus中压根就不会对资源管理的场景建模，所以在应对物理机服务混部的场景，就会有些难受，比如5台高配机器混部了20个应用，每个应用都要做端口监控，或者每个应用都有特定的采集脚本要跑，这种采集配置只能直接固化到机器上，没法在WEB上统一管理。&lt;/p&gt;
&lt;p&gt;资源管理这里，核心功能是对机器做分组，不同分组下可以关联不同的机器，不同的分组也可以关联不同的采集策略，这种视图对运维场景比较友好。如果你是研发人员，只关心应用、业务层面的监控，并且是用SDK埋点的方式，有良好的指标标签来组织数据，那资源管理这个页面，你可能压根都用不到。&lt;/p&gt;
&lt;p&gt;之前的夜莺版本，资源管理使用树形结构，非常直观，但是理解成本确实会高一些。v5尝试了一种新方案，使用前缀匹配的资源分组，类似Open-Falcon和Zabbix，可以为设备建立分组，非常直观简单，比如&lt;code&gt;n9e.server&lt;/code&gt;这个分组下面，放置夜莺的服务端机器，&lt;code&gt;n9e.mysql&lt;/code&gt;这个分组下面，放置夜莺的数据库机器。这些分组上面都可以绑定一些采集策略，分组下面的所有设备资源都生效。但是假设，有个采集插件不但要在&lt;code&gt;n9e.server&lt;/code&gt;分组的机器上生效，还要在&lt;code&gt;n9e.mysql&lt;/code&gt;分组的机器上生效，难道我要配置两次？那就太麻烦了！怎么办？&lt;/p&gt;
&lt;p&gt;在v5里，可以创建一个&lt;code&gt;n9e.&lt;/code&gt;的分组，下面不需要绑定机器，直接在&lt;code&gt;n9e.&lt;/code&gt;这个分组上配置采集策略（配置的时候勾选前缀匹配那个复选框），这个采集策略就会同时生效到前缀是&lt;code&gt;n9e.&lt;/code&gt;的分组上，显然，&lt;code&gt;n9e.server&lt;/code&gt;和&lt;code&gt;n9e.mysql&lt;/code&gt;这俩分组都是以&lt;code&gt;n9e.&lt;/code&gt;作为前缀的，所以，这俩分组下面的机器就都生效了。其实是一种变相的树形结构，这种组织方式称为classpath，据说aws内部就是用的这种方式。&lt;/p&gt;
&lt;h2 id=&#34;策略配置&#34;&gt;策略配置&lt;/h2&gt;
&lt;p&gt;策略配置有两个子菜单：告警策略、告警屏蔽。一个是配置告警规则，让什么样的数据可以报警，一个是配置屏蔽规则，让什么样的事件不发送通知。&lt;/p&gt;
&lt;p&gt;告警规则的配置，支持两种模式：Nightingale自带的模式、Prometheus的promql的模式。Nightingale的模式相对简单，只要配置指标匹配条件，圈定要判别的监控数据即可，对于Prometheus的模式，因为需要编写promql学习成本会高一些，不过在一些特定的场景下，promql的方式会更适合。&lt;/p&gt;
&lt;p&gt;“对于Nightingale的模式，只要配置指标匹配条件，圈定要判别的监控数据即可”，这句话如何理解呢？要解释好这个问题，需要从监控数据的DataModel说起了，请参考《&lt;a href=&#34;/docs/appendix/datamodel/&#34;&gt;DataModel&lt;/a&gt;》章节。监控系统每秒钟会接收成千上万的数据，大部分数据其实是不会拿来做告警判断的，那告警规则和哪些数据关联，这个就需要有个筛选匹配的机制，怎么筛选监控数据？监控数据带有metric、ident、tags等字段，那我们就可以把这些字段作为筛选条件，比如 &lt;code&gt;ident=10.4.5.6 and metric=system_cpu_idle&lt;/code&gt; 告警策略里的资源过滤、标签过滤，就是在配置这个规则。&lt;/p&gt;
&lt;p&gt;Prometheus模式对于用过Prometheus的朋友来说，相对就容易上手一些，其实就是配置的规则里边的expr字段。比如 &lt;code&gt;tomcat_threads_busy_threads{job=&amp;quot;acs-ms&amp;quot;} /  tomcat_threads_config_max_threads{job=&amp;quot;acs-ms&amp;quot;} &amp;gt; 0.5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;告警屏蔽是用于什么场景？比如有些告警事件虽然触发了，但是不想发送，就可以配置屏蔽规则，屏蔽规则是屏蔽的告警事件的发送，所以，就看事件有哪些字段是可以用来做筛选的，和监控数据类似，核心也是metric、ident、tags，事件的tags是个集合体，包括原始监控数据上报的tags、资源的tags、告警规则的附加tags，这些tags组成了灵活的维度属性，可以从各种维度去检索告警事件，后续做分析统计。&lt;/p&gt;
&lt;h2 id=&#34;事件管理&#34;&gt;事件管理&lt;/h2&gt;
&lt;p&gt;事件管理比较简单，就是展示所有未恢复的告警，每天上下班的时候应该都要巡检一下，避免漏掉了报警。如果告警之后触发了恢复，会自动从未恢复的告警列表里删掉。有的时候触发了告警之后，ident发生了变化，比如机器改了ip，这种情况这个事件就永远都不会恢复了，因为监控系统会当做不同的监控数据对待。此时就需要我们手工点击忽略按钮删除这条记录了。&lt;/p&gt;
&lt;p&gt;v4及之前的版本支持的告警合并、告警认领、告警升级相关功能，在v5里拿掉了，不是说这些功能不重要，而是因为这些功能太通用，夜莺需要、Zabbix也需要、Prometheus也需要，值得抽象为一个单独的产品。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 端口监控</title>
      <link>/docs/usage/port/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/usage/port/</guid>
      <description>
        
        
        &lt;p&gt;端口分两类，一个是TCP一个是UDP，TCP的端口如何探测是否在监听？只需要由agentd发起连接尝试即可，如果连接失败了，就认为没在监听；对于UDP的端口，没法像TCP那样探测，agentd会去尝试listen一个相同的端口，如果listen失败，就认为这个端口已经在监听了，否则就认为这个端口没在监听。&lt;/p&gt;
&lt;p&gt;配置端口采集时，需要填写多个字段的内容，各个字段的含义简要介绍如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;采集名称&lt;/strong&gt;：给这条采集策略取个名字，可以是中文，比如“n9e-mysql端口监控”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口协议&lt;/strong&gt;：根据你的端口监听的协议自行选择即可，大部分都是TCP的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口号&lt;/strong&gt;：要监控的端口号，比如3306&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接超时&lt;/strong&gt;：TCP类型的端口agentd会去尝试连接，如果连接失败就认为端口没有在监听，既然是连接就要设置超时时间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;采集周期&lt;/strong&gt;：端口监控的探测周期&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;附加标签&lt;/strong&gt;：这个字段非常重要，通常用于附加一些维度信息。比如n9e服务用的mysql端口是3306，如果告警的时候只是报出3306端口挂了，我们很难知道是哪个数据库，这种情况我们就可以附加一些标签，用于做维度标识，比如附上：&lt;code&gt;service=mysql,business=n9e&lt;/code&gt;就一下子清楚的知道这是给n9e这个业务用的mysql服务啦&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 进程监控</title>
      <link>/docs/usage/proc/</link>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/usage/proc/</guid>
      <description>
        
        
        &lt;p&gt;进程监控的采集配置，大部分字段的含义和“端口监控”雷同，不再赘述。这里着重说明进程监控特殊的地方。&lt;/p&gt;
&lt;p&gt;进程监控核心是在监控进程的数量，比如n9e-job进程，进程活着，名字是n9e-job的进程数肯定就是1，进程死了，名字是n9e-job的进程数就变成0了，此时就应该报警。但是，进程名字（查看进程名可以&lt;code&gt;cat /proc/&amp;lt;pid&amp;gt;/status&lt;/code&gt;，有个name字段）有时不具备唯一性，导致我们没法统计进程数量，比如python语言写的进程，进程名都是python，java语言写的进程，进程名都是java，那我们怎么来准确告诉agent我们要采集具体哪个进程呢？&lt;/p&gt;
&lt;p&gt;我们需要找一个能方便区分标识进程的东西，这里我们有两个办法，一个是使用进程的名字，一个是使用进程的cmdline（参看&lt;code&gt;/proc/&amp;lt;pid&amp;gt;/cmdline&lt;/code&gt;）。页面配置有个字段叫“采集方式”就是为此设计，如果是C、C++、Go这种语言写的程序，一般就用进程名来监控即可，如果是PHP、Python、Java这种语言写的程序，就要选择采集方式为：命令行，那命令行这个字段怎么填？假设要监控某个Java进程，pid是5648，命令行就填为&lt;code&gt;/proc/5648/cmdline&lt;/code&gt;的一个子串即可，只要这个子串能与其他进程的cmdline区分开，就无需使用整个cmdline内容。举例：我们使用&lt;code&gt;java -c uic.properties&lt;/code&gt;启动了一个java进程，其cmdline为：&lt;code&gt;java-cuic.properties&lt;/code&gt;，我们要监控这个进程只需要把命令行设置为&lt;code&gt;uic&lt;/code&gt;即可，&lt;code&gt;uic&lt;/code&gt;是5648这个进程的cmdline的一个子串，而且可以和其他进程区分开。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 插件监控</title>
      <link>/docs/usage/plugin/</link>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/usage/plugin/</guid>
      <description>
        
        
        &lt;p&gt;插件是扩展agentd采集能力的一种手段，通常是一个脚本，有时是二进制，我们在web上通过配置，告诉夜莺哪些机器上应该执行哪些插件，执行频率是多少，插件脚本的路径在哪里等等，这个配置会下发给agentd，agentd就知道去哪个位置找插件，并且按照某个频率周期性去执行，截获插件的stdout，解析出监控指标上报。&lt;/p&gt;
&lt;p&gt;截获的stdout要求是个json array，举例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;metric&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;disk.io.util&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;device&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sda&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;,
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: 15.4,
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;gauge&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;metric&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;api.latency&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;api&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/v1/login&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;n9e&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;monapi&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;region&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bj&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;,
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: 5.4,
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;gauge&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个数据结构可以对照《&lt;a href=&#34;/docs/appendix/datamodel/&#34;&gt;DataModel&lt;/a&gt;》一章的内容来看，上面的插件输出样例其实没有ident、alias、time字段，因为插件是agentd驱动的，所以agentd会自动补上这些字段，无需插件输出这些字段。&lt;/p&gt;
&lt;p&gt;相比《&lt;a href=&#34;/docs/appendix/datamodel/&#34;&gt;DataModel&lt;/a&gt;》一章的介绍，上例中多了一个type字段，这个字段是插件机制特有的，type可取的类型有3种：gauge、increase、rate。下面简单解释下这3种类型的意义和场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gauge: 原值类型，插件输出什么值，agentd都不做处理，原封不动发给server&lt;/li&gt;
&lt;li&gt;increase: 表示增量，agentd会把本周期取到的插件的值与上一周期的值做差值&lt;/li&gt;
&lt;li&gt;rate: 表示速率，agentd会把本周期取到的插件的值与上一周期的值做差值，然后除以周期时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大家可以把下面这个插件拿去执行一下做个测试，对这三种类型的理解会更深，场景上来说，其中gauge用的较多，另外两个类型很少用到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;date +%s&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;[
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;metric&amp;#34;: &amp;#34;plugin_example_gauge&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;tags&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;testcase&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;            &amp;#34;author&amp;#34;: &amp;#34;ulric&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        },
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;value&amp;#34;: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;type&amp;#34;: &amp;#34;gauge&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    },
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;metric&amp;#34;: &amp;#34;plugin_example_rate&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;tags&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;testcase&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;            &amp;#34;author&amp;#34;: &amp;#34;ulric&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        },
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;value&amp;#34;: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;type&amp;#34;: &amp;#34;rate&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    },
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;metric&amp;#34;: &amp;#34;plugin_example_increase&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;tags&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;testcase&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;            &amp;#34;author&amp;#34;: &amp;#34;ulric&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        },
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;value&amp;#34;: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;type&amp;#34;: &amp;#34;increase&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;]&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;agentd执行插件，每次都是fork一个进程去跑的，就类似我们在shell环境下跑一个脚本，Linux下跑一个脚本可以给脚本传参数，可以设置环境变量，可以给脚本传入stdin，所以页面上也支持配置这些内容。&lt;/p&gt;
&lt;p&gt;欢迎大家写文章介绍自己的插件，大家共建生态！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 日志监控</title>
      <link>/docs/usage/logmon/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/usage/logmon/</guid>
      <description>
        
        
        &lt;p&gt;TODO: 新版本的日志监控对日志文件的匹配是否支持glob方式？有哪些变化？&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: SNMP监控</title>
      <link>/docs/usage/snmp/</link>
      <pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/usage/snmp/</guid>
      <description>
        
        
        &lt;p&gt;TODO: 描述SNMP采集的使用方法&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 告警通知</title>
      <link>/docs/usage/notify/</link>
      <pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/usage/notify/</guid>
      <description>
        
        
        &lt;p&gt;在《&lt;a href=&#34;https://n9e.didiyun.com/docs/intro/&#34;&gt;夜莺介绍&lt;/a&gt;》一文中，我们介绍了夜莺的告警信息通知 notify.py 脚本来实现的，本文详细讲解下 notify.py 的实现原理，以及如何在页面上配置用户的联系方式，来支持多种通知渠道&lt;/p&gt;
&lt;h3 id=&#34;notifypy原理&#34;&gt;notify.py原理&lt;/h3&gt;
&lt;p&gt;因为通知渠道多种多样（短信、邮件、电话、微信、钉钉、slack、飞书、jira、公司自有im等等），夜莺没法内置支持所有的通知渠道，所以需要一个非常灵活易于扩展的方式，最灵活易于扩展的方式显然是代码。所以夜莺发送告警通知的时候，会使用notify.py脚本来发送，这个脚本放在etc/script目录下，大家可以自行修改。n9e-server进程生成告警事件之后，会把告警事件的内容整理成一个json字符串，通过stdin的方式传给notify.py，所有的发送逻辑都在notify.py里完成。各位运维研发的小伙伴，对于阅读并修改python脚本应该是比较得心应手的，所以大胆改造这个脚本吧，欢迎PR，让notify.py支持更多发送媒介。&lt;/p&gt;
&lt;p&gt;notify.py收到告警信息之后，会将告警格式化为一个有缩进的json写入一个临时文件，为后续排查问题使用，临时文件的命名规则是 &lt;code&gt;${rule_id}_${event_id}_${trigger_time}&lt;/code&gt;。这个临时文件会放到哪个目录呢？请阅读notify.py自己找答案。所以，只要看到临时文件的生成，就说明告警逻辑是没有问题的。如果有某个媒介没有通知成功，那就要仔细查看notify.py的代码了。如果觉得notify.py的代码也没问题，那就要怀疑通道媒介是否做了限制之类的，比如钉钉，就有每分钟发送条数的限制。&lt;/p&gt;
&lt;p&gt;另外notify.py具体如何支持多种通知媒介呢？其实要想把消息发出去，只要知道发送对象的联系方式和发送通道就可以了，发送对象可以从json对象的event.users中获取，发送通道可以从 event.notify_channels 中获取，具体如何配置，下面会详细介绍。&lt;/p&gt;
&lt;h3 id=&#34;邮件发送配置&#34;&gt;邮件发送配置&lt;/h3&gt;
&lt;p&gt;目前notify.py 提供了发送邮件和钉钉群消息的能力，下面介绍下如何接入使用。发送邮件的话，首先需要修改notify.py中的邮件网关配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;mail_host&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;smtp.163.com&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;mail_port&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;994&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;mail_user&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ulricqin&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;mail_pass&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;mail_from&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ulricqin@163.com&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改完成之后，在个人信息-邮箱的地方，填上自己的邮箱&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s3-gz01.didistatic.com/n9e-pub/image/n9e-v5-user-profile.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果邮件网关配置的没问题的话，当告警事件触发后，就可以收到告警邮件通知了。如果没有收到，可以依次检查页面上是否生成未恢复的告警事件，检查上文提到的临时文件是否生成，检查邮件网关配置，检查邮件发送代码逻辑，也可以自己写个邮件测试小脚本测试下邮件发送的方法逻辑。&lt;/p&gt;
&lt;h3 id=&#34;钉钉群消息发送配置&#34;&gt;钉钉群消息发送配置&lt;/h3&gt;
&lt;p&gt;夜莺提供了支持多种消息媒介的能力，除了内置的邮箱和手机号之外，在 server.yml 中，可以配置额外的通知媒介，配置如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;contactKeys&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Wecom Robot Token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;wecom_robot_token&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Dingtalk Robot Token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# User的更多联系方式的下拉框中，钉钉机器人方式的label部分&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;dingtalk_robot_token&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# User的更多联系方式的下拉框中，钉钉机器人方式的key部分，需要和notify.py中获取用户此联系方式的key相同&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;notifyChannels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- email&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- sms&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- voice&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- dingtalk&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 通知渠道，dingtalk代表要启用钉钉通知媒介&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- wecom&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目前默认配置了微信机器人和钉钉机器人，如果想要增加其他联系方式，修改配置文件，然后重启 n9e-server 即可。重启服务端之后，在创建用户的时候，就可以给用户添加在server.yml中配置的联系方式了，如果是发送钉钉群消息的话，可以选择Dingtalk Robot Token&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s3-gz01.didistatic.com/n9e-pub/image/n9e-v5-user-contacts.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;假设我们在系统里创建了一个虚拟用户：dingtalk-x，并且把钉钉的token配置到了dingtalk-x的Dingtalk Robot Token字段上。那当我们把dingtalk-x或者dingtalk-x所在的团队添加到某个告警策略的接收者之后，当告警触发的时候，对应的钉钉机器人所在的钉钉群就会收到告警信息，如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s3-gz01.didistatic.com/n9e-pub/image/n9e-v5-dingtalk-notice.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;支持其他通知媒介&#34;&gt;支持其他通知媒介&lt;/h3&gt;
&lt;p&gt;这里以发送微信群消息为例，主要分三个步骤。&lt;/p&gt;
&lt;p&gt;第一，在 server.yml 中配置新的通知媒介联系字段和通知渠道，然后重启服务器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;contactKeys&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Wecom Robot Token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# User的更多联系方式的下拉框中，微信机器人方式的label部分&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;wecom_robot_token&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# User的更多联系方式的下拉框中，微信机器人方式的key部分，需要和notify.py中获取用户此联系方式的key相同&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Dingtalk Robot Token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;dingtalk_robot_token&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;notifyChannels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- email&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- sms&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- voice&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- dingtalk&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- wecom&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 通知渠道，wecom代表要启用企业微信通知媒介&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二，在创建用户的时候，以添加微信群消息举例，在更多联系方式的地方，把 Wecom Robot Token 字段的值配上（配置为企业微信机器人的token），之后在notify.py中就可以通过user的 &lt;code&gt;contacts.get(&amp;quot;wecom_robot_token&amp;quot;, &amp;quot;&amp;quot;)&lt;/code&gt; 拿到该用户的企业微信token。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s3-gz01.didistatic.com/n9e-pub/image/n9e-v5-wecom-notice.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三， 到这一步，新通知媒介的方法名称知道了（notifyChannels.xxx），用户的联系方式也知道了(&lt;code&gt;user.contacts[contactKeys.key]&lt;/code&gt;)，就可以补充notify.py中send_xxx的方法了，脚本完成补充之后，在个人信息页面，配置更多联系方式，就可以收到对应的消息了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#5c35cc;font-weight:bold&#34;&gt;@classmethod&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;send_wecom&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;cls&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;payload&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;send_wecom&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 补充发送逻辑&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://s3-gz01.didistatic.com/n9e-pub/image/n9e-v5-user-profile-dingtalk.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
